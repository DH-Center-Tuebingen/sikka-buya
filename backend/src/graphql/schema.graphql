scalar Void

type AuthResponse {
  success: Boolean
  message: String
  token: String
  user: User
}

type User {
  id: ID
  email: String
  super: Boolean
}

type Name {
  id: ID
  name: String
}

type Material {
  id: ID
  name: String
  color: String
}

input MintInput {
  name: String
  location: String
  uncertain: Boolean
  uncertainArea: String
  province: ID
}

type CoinSideInformation {
  fieldText: String
  innerInscript: String
  intermediateInscript: String
  outerInscript: String
  misc: String
}

input CoinSideInformationInput {
  fieldText: String = ""
  innerInscript: String = ""
  intermediateInscript: String = ""
  outerInscript: String = ""
  misc: String = ""
}

type CoinTypePagination {
  pageInfo: PageInfo
  types: [CoinType]
}

type ModCoinTypePagination {
  pageInfo: PageInfo
  types: [ModCoinType]
}

type CoinType {
  id: ID
  projectId: String
  treadwellId: String
  mint: Mint
  mintAsOnCoin: String
  material: Material
  nominal: Name
  yearOfMint: String
  donativ: Boolean
  procedure: String
  issuers: [TitledPerson]
  overlords: [Overlord]
  otherPersons: [Person]
  caliph: Person
  avers: CoinSideInformation
  reverse: CoinSideInformation
  cursiveScript: Boolean
  coinMarks: [CoinMark]
  literature: String
  pieces: [String]
  specials: String
  excludeFromTypeCatalogue: Boolean
  excludeFromMapApp: Boolean
  internalNotes: String
  yearUncertain: Boolean
  mintUncertain: Boolean
}

type MintMaterials {
  mint: Mint
  materials: [Material]
}

type ModCoinType {
  id: ID
  projectId: String
  treadwellId: String
  mint: Mint
  mintAsOnCoin: String
  material: Name
  nominal: Name
  yearOfMint: String
  donativ: Boolean
  procedure: String
  issuers: [TitledPerson]
  overlords: [Overlord]
  otherPersons: [Person]
  caliph: Person
  avers: CoinSideInformation
  reverse: CoinSideInformation
  cursiveScript: Boolean
  coinMarks: [CoinMark]
  literature: String
  pieces: [String]
  specials: String
  excludeFromTypeCatalogue: Boolean
  excludeFromMapApp: Boolean
  internalNotes: String
  yearUncertain: Boolean
  mintUncertain: Boolean
  reviewed: Boolean
  completed: Boolean
}

type ModReview {
  completed: Boolean
  reviewed: Boolean
}

input CoinTypeInput {
  id: ID = null
  projectId: String = ""
  treadwellId: String = ""
  mint: ID = null
  mintAsOnCoin: String = ""
  material: ID = null
  nominal: ID = null
  yearOfMint: String = ""
  donativ: Boolean = false
  procedure: String = ""
  issuers: [TitledPersonInput] = []
  overlords: [OverlordInput] = []
  otherPersons: [ID] = []
  caliph: ID = null
  avers: CoinSideInformationInput
  reverse: CoinSideInformationInput
  cursiveScript: Boolean = false
  coinMarks: [ID] = []
  literature: String = ""
  pieces: [String] = []
  specials: String = ""
  excludeFromTypeCatalogue: Boolean
  excludeFromMapApp: Boolean
  internalNotes: String
  yearUncertain: Boolean
  mintUncertain: Boolean
}

type CoinMark {
  id: ID
  name: String
}

type Mint {
  id: ID
  name: String
  location: String
  uncertain: Boolean
  uncertainArea: String
  province: Name
}

input PersonInput {
  id: ID
  name: String
  shortName: String
  role: ID
  dynasty: ID
  color: String
}

input TitledPersonInput {
  person: ID!
  titles: [ID]!
  honorifics: [ID]!
}

input OverlordInput {
  type: ID
  person: ID!
  rank: Int!
  titles: [Int]!
  honorifics: [Int]!
}

type Dominion {
  overlord: Person
  mints: [Mint]!
}

type RuledMint {
  mint: Mint
  overlords: [Overlord]!
}

type Range {
  from: Int
  to: Int
}

type PersonPosition {
  person: ID
  order: Int
}

type Query {
  ping: String
  environment: String

  # Tested in 004_coin_mark
  coinMark: [CoinMark]
  searchCoinMark(text: String): [CoinMark]!
  getCoinMark(id: ID!): CoinMark

  # Tested in 005_nominal
  nominal: [Name]!
  searchNominal(text: String): [Name]!
  getNominal(id: ID!): Name

  # Tested in 006_material
  material: [Material]!
  searchMaterial(text: String): [Material]!
  getMaterial(id: ID!): Material

  # Tested in 007_mint
  mint: [Mint]!
  searchMint(text: String): [Mint]!
  getMint(id: ID!): Mint

  # Tested in 008_role
  role: [Name]
  searchRole(text: String): [Name]!
  getRole(id: ID!): Name

  # Tested in 009_dynasty
  dynasty: [Name]!
  searchDynasty(text: String): [Name]!
  getDynasty(id: ID!): Name

  # Tested in 010_title
  title: [Name]!
  searchTitle(text: String): [Name]!
  getTitle(id: ID!): Name

  # Tested in 011_honorifics
  honorific: [Name]!
  searchHonorific(text: String): [Name]!
  getHonorific(id: ID!): Name

  # Tested in 012_person
  person(role: ID, dynasty: ID): [Person]!
  searchPerson(text: String): [Person]!
  getPerson(id: ID!): Person

  # Tested in 030_coin_type
  coinType(pagination: Pagination, filters: TypeFilter): CoinTypePagination

  searchType(
    text: String
    excludeFromTypeCatalogue: Boolean
    excludeFromMapApp: Boolean
  ): [CoinType]!

  getCoinType(id: ID!): CoinType

  # TODO: missing Tests ---------------------------------------------

  mintMaterials: [MintMaterials]
  getMaterialColor(id: ID!): String

  province: [Name]
  searchProvince(text: String): [Name]
  getProvince(id: ID!): Name

  searchCaliph(text: String): [Person]
  searchOverlord(text: String): [Person]
  searchIssuer(text: String): [Person]

  modGetTypes(
    pagination: Pagination
    filters: ModTypeFilter
    evalFilters: EvalFilter
  ): ModCoinTypePagination

  ruledMintCount(rulers: [ID]!,mints: [ID]): [RulerPointArray]
  typeCountOfMints(ids: [ID]): [MintPointArray]


  timespan: Range
  getAnalytics: Analytics

  getTypeComplete(id: ID!): Boolean

  getDominion(year: Int): [Dominion]
  ruledMint(year: Int): [RuledMint]

  getComments(property: String, propertyId: ID): [Comment]
  getNote(property: String, propertyId: ID): String

  searchPersonsWithRole(
    text: String!
    include: [String]
    exclude: [String]
  ): [Person]!
  searchPersonsWithoutRole(text: String!): [Person]!

  isSuperUserSet: Boolean
  databaseExists: Boolean
  users: [User]
  login(email: String!, password: String!): AuthResponse
  auth(token: String): User

  getLang(id: ID!, table: String!, lang: String!, attr: String!): String

  getPersonExplorerOrder: [PersonPosition]
  fixDiff: String

  fullSearchOnTypes(
    text: String
    pagination: Pagination
  ): PaginationTypeTextSearch
}

type MintPointArray {
  mint: Mint
  data: [Point]
}

type RulerPointArray {
  ruler: Person,
  data: [Point]
}

type Point {
  x: Int
  y: Int
}

type PaginationTypeTextSearch {
  pagination: PageInfo
  results: [TypeTextSearch]
}

type TypeTextSearch {
  type: CoinType
  preview: String
}

type Mutation {
  # Tested in 002_setup
  setup(email: String!, password: String!): AuthResponse

  # Tested in 003_user
  inviteUser(email: String): Boolean
  acceptInvite(email: String, password: String): Void

  # Tested in 004_coin_mark
  addCoinMark(name: String!): Void
  updateCoinMark(id: ID!, name: String!): Void
  deleteCoinMark(id: ID): Void

  # Tested in 005_nominal
  addNominal(name: String!): Void
  updateNominal(id: ID!, name: String!): Void
  deleteNominal(id: ID): Void

  # Tested in 006_material
  addMaterial(name: String!, color: String): ID
  updateMaterial(id: ID!, name: String!, color: String): Void
  deleteMaterial(id: ID): Void

  # Tested in 007_mint
  addMint(data: MintInput): ID
  updateMint(id: ID!, data: MintInput): Void
  deleteMint(id: ID): Void

  # Tested in 008_role
  addRole(name: String!): Void
  updateRole(id: ID!, name: String!): Void
  deleteRole(id: ID): Void

  # Tested in 009_dynasty
  addDynasty(name: String!): Void
  updateDynasty(id: ID!, name: String!): Void
  deleteDynasty(id: ID): Void

  # Tested in 010_title
  addTitle(name: String!): Void
  updateTitle(id: ID!, name: String!): Void
  deleteTitle(id: ID): Void

  # Tested in 011_honorifics
  addHonorific(name: String!): Void
  updateHonorific(id: ID!, name: String!): Void
  deleteHonorific(id: ID): Void

  # Tested in 012_person
  addPerson(data: PersonInput): Void
  updatePerson(data: PersonInput): Void
  deletePerson(id: ID): Void

  # Tested in 030_coin_type
  addCoinType(data: CoinTypeInput): Void
  updateCoinType(id: ID, data: CoinTypeInput): Void
  deleteCoinType(id: ID): Void

  # TODO: missing Tests ---------------------------------------------

  deleteUser(id: ID): Void

  addProvince(name: String!): Void
  updateProvince(id: ID!, name: String!): Void
  deleteProvince(id: ID): Void

  updateNote(text: String, property: String, propertyId: ID): Void
  updateLang(
    id: ID!
    table: String!
    lang: String!
    attr: String!
    value: String!
  ): Void
  addComment(text: String, user: ID, property: String, propertyId: ID): Void

  setTypeComplete(id: ID!, completed: Boolean = true): Boolean
  setTypeReviewed(id: ID!, reviewed: Boolean = true): Boolean

  changePersonExplorerOrder(person: ID!, position: Int!): Void

  updateMaterialColor(id: ID!, color: String!): Void
  deleteMaterialColor(id: ID): Void
}

input Pagination {
  count: Int!
  page: Int!
}

input EvalFilter {
  completed: Boolean
  reviewed: Boolean
}

input ModTypeFilter {
  text: String
  donativ: Boolean
  cursiveScript: Boolean
  excludeFromTypeCatalogue: Boolean
  excludeFromMapApp: Boolean
  yearUncertain: Boolean
  mintUncertain: Boolean
  mint: ID
  caliph: ID
  nominal: ID
  material: ID
  coinMark: ID
  reviewed: Boolean
  completed: Boolean
}

input TypeFilter {
  text: String
  donativ: Boolean
  procedure: String
  cursiveScript: Boolean
  excludeFromTypeCatalogue: Boolean
  excludeFromMapApp: Boolean
  yearOfMint: String
  yearUncertain: Boolean
  mintUncertain: Boolean
  mint: [ID]
  ruler: [ID]
  caliph: [ID]
  otherPerson: [ID]
  nominal: [ID]
  material: [ID]
  coinMark: [ID]
  title: [ID]
  honorific: [ID]
}

type PageInfo {
  page: Int
  count: Int
  last: Int
  total: Int
}

type Note {
  id: ID
  text: String
}

type Comment {
  id: ID
  user: User
  time: String
  text: String
}

interface IPerson {
  id: ID
  name: String
  shortName: String
  role: Name
  dynasty: Name
}

interface ITitled {
  titles: [Name]
  honorifics: [Name]
}

type Person implements IPerson {
  id: ID
  name: String
  shortName: String
  role: Name
  dynasty: Name
  color: String
}

# input TitledPerson {
#   id: ID
# }

type TitledPerson implements IPerson & ITitled {
  id: ID
  name: String
  shortName: String
  role: Name
  dynasty: Name
  color: String
  titles: [Name]!
  honorifics: [Name]!
}

type Overlord implements IPerson & ITitled {
  id: ID
  name: String
  shortName: String
  role: Name
  dynasty: Name
  color: String
  rank: Int!
  titles: [Name]!
  honorifics: [Name]!
}

type Analytics {
  typeCount: Int
  mintCount: Int
  yearCount: Int
}
